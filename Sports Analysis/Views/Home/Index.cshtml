@model Sports_Analysis.Models.FootballMatchViewModel

@{
    ViewData["Title"] = "Football Matches";
}

<div class="container mt-4">
    <h2>Football Matches</h2>
    <div id="loadingSpinner" class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div id="loadingMessage">Loading data from server (This may take add while)...</div>
    </div>
    <div id="errorMessage" class="alert alert-danger d-none text-center"></div>
    <div class="table-responsive d-none" id="matchesTableContainer">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Home Team</th>
                    <th>Away Team</th>
                    <th>Score</th>
                    <th>Possession</th>
                    <th>Shots</th>
                </tr>
            </thead>
            <tbody id="matchesTableBody">
                <!-- Data will be inserted here -->
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
<script>
    // In-memory cache for matches
    window.footballMatchesCache = null;
    let retryCount = 0;
    const maxRetries = 6;
    const retryDelay = 3000; // 3 seconds

    async function fetchMatches() {
        document.getElementById('loadingSpinner').classList.remove('d-none');
        document.getElementById('matchesTableContainer').classList.add('d-none');
        document.getElementById('errorMessage').classList.add('d-none');
        document.getElementById('loadingMessage').innerText = retryCount === 0 ? 'Loading data from server...' : 'Waking up server, please wait...';
        try {
            const response = await fetch('/api/FootballMatchesApi');
            if (!response.ok) throw new Error('Server not ready');
            const matches = await response.json();
            window.footballMatchesCache = matches;
            renderTable(matches);
            document.getElementById('loadingSpinner').classList.add('d-none');
            document.getElementById('matchesTableContainer').classList.remove('d-none');
        } catch (err) {
            if (retryCount < maxRetries) {
                retryCount++;
                setTimeout(fetchMatches, retryDelay);
            } else {
                document.getElementById('loadingSpinner').classList.add('d-none');
                document.getElementById('errorMessage').innerText = 'Failed to load data from server. Please try again later.';
                document.getElementById('errorMessage').classList.remove('d-none');
            }
        }
    }

    function renderTable(matches) {
        const tbody = document.getElementById('matchesTableBody');
        tbody.innerHTML = '';
        matches.forEach(match => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${new Date(match.date).toLocaleDateString()}</td>
                <td>${match.homeTeam}</td>
                <td>${match.awayTeam}</td>
                <td>${match.homeGoals} - ${match.awayGoals}</td>
                <td>${match.homePossession}% - ${match.awayPossession}%</td>
                <td>${match.homeShots} (${match.homeShotsOnTarget}) - ${match.awayShots} (${match.awayShotsOnTarget})</td>
            `;
            tbody.appendChild(row);
        });
    }

    // On page load
    fetchMatches();
</script>
}
