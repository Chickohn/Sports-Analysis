@model Sports_Analysis.Models.FootballMatchViewModel

@{
    ViewData["Title"] = "Football Matches";
}

<div class="container mt-4">
    <h2>Football Matches</h2>
    <div id="loadingSpinner" class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div id="loadingMessage">Loading data from server (This may take a while)...</div>
    </div>
    <div id="errorMessage" class="alert alert-danger d-none text-center"></div>
    <div class="table-responsive d-none" id="matchesTableContainer">
        <table class="table table-striped table-hover">
            <thead>
                <tr id="matchesTableHeader">
                    <!-- Headers will be dynamically inserted here -->
                </tr>
            </thead>
            <tbody id="matchesTableBody">
                <!-- Data will be inserted here -->
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
<script>
    // In-memory cache for matches
    window.footballMatchesCache = null;
    let retryCount = 0;
    const maxRetries = 6;
    const retryDelay = 3000; // 3 seconds

    // Define all available columns
    const columns = [
        { key: 'id', label: 'ID' },
        { key: 'season', label: 'Season' },
        { key: 'date', label: 'Date' },
        { key: 'homeTeam', label: 'Home Team' },
        { key: 'awayTeam', label: 'Away Team' },
        { key: 'homeClearances', label: 'Home Clearances' },
        { key: 'homeCorners', label: 'Home Corners' },
        { key: 'homeFoulsConceded', label: 'Home Fouls' },
        { key: 'homeOffsides', label: 'Home Offsides' },
        { key: 'homePasses', label: 'Home Passes' },
        { key: 'homePossession', label: 'Home Possession' },
        { key: 'homeRedCards', label: 'Home Red Cards' },
        { key: 'homeShots', label: 'Home Shots' },
        { key: 'homeShotsOnTarget', label: 'Home Shots On Target' },
        { key: 'homeTackles', label: 'Home Tackles' },
        { key: 'homeTouches', label: 'Home Touches' },
        { key: 'homeYellowCards', label: 'Home Yellow Cards' },
        { key: 'awayClearances', label: 'Away Clearances' },
        { key: 'awayCorners', label: 'Away Corners' },
        { key: 'awayFoulsConceded', label: 'Away Fouls' },
        { key: 'awayOffsides', label: 'Away Offsides' },
        { key: 'awayPasses', label: 'Away Passes' },
        { key: 'awayPossession', label: 'Away Possession' },
        { key: 'awayRedCards', label: 'Away Red Cards' },
        { key: 'awayShots', label: 'Away Shots' },
        { key: 'awayShotsOnTarget', label: 'Away Shots On Target' },
        { key: 'awayTackles', label: 'Away Tackles' },
        { key: 'awayTouches', label: 'Away Touches' },
        { key: 'awayYellowCards', label: 'Away Yellow Cards' },
        { key: 'homeGoals', label: 'Home Goals' },
        { key: 'awayGoals', label: 'Away Goals' },
        { key: 'goalDifference', label: 'Goal Difference' },
        { key: 'result', label: 'Result' }
    ];

    function createTableHeader() {
        const headerRow = document.getElementById('matchesTableHeader');
        headerRow.innerHTML = columns.map(col => `<th>${col.label}</th>`).join('');
    }

    function formatValue(value, key) {
        if (value === null || value === undefined) return '';
        
        switch(key) {
            case 'date':
                return new Date(value).toLocaleDateString();
            case 'homePossession':
            case 'awayPossession':
                return `${value}%`;
            case 'result':
                return value === 0 ? 'Home Win' : value === 1 ? 'Away Win' : 'Draw';
            default:
                return value.toString();
        }
    }

    async function fetchMatches() {
        document.getElementById('loadingSpinner').classList.remove('d-none');
        document.getElementById('matchesTableContainer').classList.add('d-none');
        document.getElementById('errorMessage').classList.add('d-none');
        document.getElementById('loadingMessage').innerText = retryCount === 0 ? 'Loading data from server...' : 'Waking up server, please wait...';
        try {
            const response = await fetch('/api/FootballMatchesApi');
            if (!response.ok) throw new Error('Server not ready');
            const matches = await response.json();
            window.footballMatchesCache = matches;
            createTableHeader();
            renderTable(matches);
            document.getElementById('loadingSpinner').classList.add('d-none');
            document.getElementById('matchesTableContainer').classList.remove('d-none');
        } catch (err) {
            if (retryCount < maxRetries) {
                retryCount++;
                setTimeout(fetchMatches, retryDelay);
            } else {
                document.getElementById('loadingSpinner').classList.add('d-none');
                document.getElementById('errorMessage').innerText = 'Failed to load data from server. Please try again later.';
                document.getElementById('errorMessage').classList.remove('d-none');
            }
        }
    }

    function renderTable(matches) {
        const tbody = document.getElementById('matchesTableBody');
        tbody.innerHTML = '';
        matches.forEach(match => {
            const row = document.createElement('tr');
            row.innerHTML = columns.map(col => 
                `<td>${formatValue(match[col.key], col.key)}</td>`
            ).join('');
            tbody.appendChild(row);
        });
    }

    // On page load
    fetchMatches();
</script>
}
