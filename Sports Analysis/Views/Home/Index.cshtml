@model Sports_Analysis.Models.FootballMatchViewModel

@{
    ViewData["Title"] = "Football Matches";
}

<div class="container mt-4">
    <h1>Football Matches</h1>
    
    <div class="row mb-4">
        <div class="col">
            <input type="text" id="searchInput" class="form-control" placeholder="Search matches...">
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Season</th>
                    <th>Home Team</th>
                    <th>Score</th>
                    <th>Away Team</th>
                    <th>Home Possession</th>
                    <th>Away Possession</th>
                    <th>Home Shots</th>
                    <th>Away Shots</th>
                </tr>
            </thead>
            <tbody id="matchesTableBody">
                @if (Model.Matches.Any())
                {
                    @await Html.PartialAsync("_MatchesTable", Model.Matches)
                }
                else
                {
                    <tr>
                        <td colspan="9" class="text-center">No matches found. Please try again later.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div id="loadingSpinner" class="text-center d-none">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPage = @Model.CurrentPage;
        const pageSize = @Model.PageSize;
        let isLoading = false;
        let searchTimeout;

        // Infinite scroll
        window.addEventListener('scroll', function() {
            if (isLoading) return;

            const {scrollTop, scrollHeight, clientHeight} = document.documentElement;
            if (scrollTop + clientHeight >= scrollHeight - 5) {
                loadMoreMatches();
            }
        });

        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function(e) {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                const searchTerm = e.target.value.toLowerCase();
                filterTable(searchTerm);
            }, 300);
        });

        function filterTable(searchTerm) {
            const rows = document.querySelectorAll('#matchesTableBody tr');
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        }

        async function loadMoreMatches() {
            if (isLoading) return;
            
            isLoading = true;
            document.getElementById('loadingSpinner').classList.remove('d-none');
            
            try {
                const response = await fetch(`/Home/LoadMore?page=${currentPage + 1}&pageSize=${pageSize}`);
                if (!response.ok) throw new Error('Network response was not ok');
                
                const html = await response.text();
                if (html.trim()) {
                    document.getElementById('matchesTableBody').insertAdjacentHTML('beforeend', html);
                    currentPage++;
                }
            } catch (error) {
                console.error('Error loading more matches:', error);
            } finally {
                isLoading = false;
                document.getElementById('loadingSpinner').classList.add('d-none');
            }
        }
    </script>
}
