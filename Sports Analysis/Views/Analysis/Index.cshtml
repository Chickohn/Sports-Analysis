@{
    ViewData["Title"] = "Analysis";
}

<h1 class="mt-4 mb-4">Analysis</h1>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12 d-flex justify-content-center align-items-center">
            <div id="teamGoalsLoading" class="me-3" style="display:none;text-align:center;">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div id="teamGoalsLoadingText" style="font-size:0.9em;">Loading teams...</div>
            </div>
            <select id="teamDropdown" class="form-select w-auto"></select>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Team Goals Over Last 15 Games</h5>
                    <canvas id="teamGoalsChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Home vs Away Win Rate</h5>
                    <canvas id="winRateChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Average Possession by Team</h5>
                    <canvas id="possessionChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Yellow/Red Cards per Game</h5>
                    <canvas id="cardsChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Shots on Target vs Total Shots</h5>
                    <canvas id="shotsChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Cumulative Points Over Season</h5>
                    <canvas id="pointsChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Chart instances
        let teamGoalsChart, winRateChart, possessionChart, cardsChart, shotsChart, pointsChart;
        let allTeams = [];
        let loadingTeams = false;
        let loadingComplete = false;

        async function loadTeamsFromCacheOrApi() {
            loadingTeams = true;
            document.getElementById('teamGoalsLoading').style.display = '';
            document.getElementById('teamGoalsLoadingText').textContent = 'Loading teams...';
            let dropdown = document.getElementById('teamDropdown');
            dropdown.disabled = true;
            allTeams = [];
            let defaultIndex = 0;
            let foundCrystalPalace = false;
            let matches = window.footballMatchesCache;
            if (!matches) {
                // Try to fetch from API if not cached
                try {
                    const response = await fetch('/api/FootballMatchesApi');
                    if (!response.ok) throw new Error('Server not ready');
                    matches = await response.json();
                    window.footballMatchesCache = matches;
                } catch (e) {
                    document.getElementById('teamGoalsLoadingText').textContent = 'Error loading teams.';
                    dropdown.disabled = true;
                    return;
                }
            }
            // Extract unique teams
            allTeams = Array.from(new Set([
                ...matches.map(m => m.homeTeam),
                ...matches.map(m => m.awayTeam)
            ].filter(t => t && t !== 'Unknown'))).sort();
            dropdown.innerHTML = '';
            allTeams.forEach((team, idx) => {
                const option = document.createElement('option');
                option.value = team;
                option.textContent = team;
                if (team.toLowerCase() === 'crystal palace') {
                    defaultIndex = idx;
                    foundCrystalPalace = true;
                }
                dropdown.appendChild(option);
            });
            if (dropdown.selectedIndex === -1 || !foundCrystalPalace) {
                dropdown.selectedIndex = 0;
            } else {
                dropdown.selectedIndex = defaultIndex;
            }
            if (dropdown.value) {
                await updateAllCharts(dropdown.value, matches);
            }
            loadingTeams = false;
            loadingComplete = true;
            document.getElementById('teamGoalsLoading').style.display = 'none';
            dropdown.disabled = false;
        }

        async function updateAllCharts(team, matches) {
            await Promise.all([
                loadTeamGoals(team, matches),
                loadWinRate(team, matches),
                loadPossession(team, matches),
                loadCards(team, matches),
                loadShots(team, matches),
                loadPoints(team, matches)
            ]);
        }

        // The following functions will use cached matches if available, otherwise fallback to API endpoints
        async function loadTeamGoals(team, matches) {
            document.getElementById('teamGoalsLoading').style.display = '';
            document.getElementById('teamGoalsLoadingText').textContent = 'Loading chart...';
            if (teamGoalsChart) teamGoalsChart.destroy();
            try {
                let data;
                if (matches) {
                    let teamMatches = matches.filter(m => m.homeTeam === team || m.awayTeam === team)
                        .sort((a, b) => new Date(b.date) - new Date(a.date))
                        .slice(0, 15)
                        .sort((a, b) => new Date(a.date) - new Date(b.date));
                    data = teamMatches.map(m => ({
                        date: new Date(m.date).toISOString().slice(0, 10),
                        goals: m.homeTeam === team ? m.homeGoals : m.awayGoals
                    }));
                } else {
                    const res = await fetch(`/Analysis/GetTeamGoals?team=${encodeURIComponent(team)}`);
                    data = await res.json();
                }
                const labels = data.map(d => d.date);
                const goals = data.map(d => d.goals);
                const ctx = document.getElementById('teamGoalsChart').getContext('2d');
                teamGoalsChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: `Goals per Game (${team})`,
                            data: goals,
                            borderColor: 'rgba(54, 162, 235, 1)',
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            fill: true,
                            tension: 0.3
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { display: true }
                        },
                        scales: {
                            y: { beginAtZero: true, title: { display: true, text: 'Goals' } },
                            x: { title: { display: true, text: 'Date' } }
                        }
                    }
                });
            } catch (e) {}
            document.getElementById('teamGoalsLoading').style.display = loadingTeams ? '' : 'none';
            document.getElementById('teamGoalsLoadingText').textContent = loadingTeams ? 'Loading teams...' : '';
        }

        async function loadWinRate(team, matches) {
            if (winRateChart) winRateChart.destroy();
            try {
                let data;
                if (matches) {
                    let teamMatches = matches.filter(m => m.homeTeam === team || m.awayTeam === team);
                    let homeWins = 0;
                    let awayWins = 0;
                    let draws = 0;
                    teamMatches.forEach(m => {
                        if (m.homeTeam === team && m.homeGoals > m.awayGoals) homeWins++;
                        if (m.awayTeam === team && m.awayGoals > m.homeGoals) awayWins++;
                        if (m.homeTeam === team && m.homeGoals === m.awayGoals) draws++;
                    });
                    data = { homeWins, awayWins, draws };
                } else {
                    const res = await fetch(`/Analysis/GetWinRate?team=${encodeURIComponent(team)}`);
                    data = await res.json();
                }
                const ctx = document.getElementById('winRateChart').getContext('2d');
                winRateChart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: ['Home Wins', 'Away Wins', 'Draws'],
                        datasets: [{
                            data: [data.homeWins, data.awayWins, data.draws],
                            backgroundColor: [
                                'rgba(75, 192, 192, 0.7)',
                                'rgba(255, 159, 64, 0.7)',
                                'rgba(201, 203, 207, 0.7)'
                            ],
                            borderColor: [
                                'rgba(75, 192, 192, 1)',
                                'rgba(255, 159, 64, 1)',
                                'rgba(201, 203, 207, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { display: true }
                        }
                    }
                });
            } catch (e) {}
        }

        async function loadPossession(team, matches) {
            if (possessionChart) possessionChart.destroy();
            try {
                let data;
                if (matches) {
                    let teamMatches = matches.filter(m => m.homeTeam === team || m.awayTeam === team);
                    let totalPossession = 0;
                    teamMatches.forEach(m => {
                        if (m.homeTeam === team) totalPossession += m.homePossession;
                        if (m.awayTeam === team) totalPossession += m.awayPossession;
                    });
                    data = { avgPossession: totalPossession / teamMatches.length, leagueAvg: 50 };
                } else {
                    const res = await fetch(`/Analysis/GetPossession?team=${encodeURIComponent(team)}`);
                    data = await res.json();
                }
                const ctx = document.getElementById('possessionChart').getContext('2d');
                possessionChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: [team, 'League Avg'],
                        datasets: [{
                            label: 'Avg Possession %',
                            data: [data.avgPossession, data.leagueAvg],
                            backgroundColor: [
                                'rgba(153, 102, 255, 0.7)',
                                'rgba(201, 203, 207, 0.7)'
                            ],
                            borderColor: [
                                'rgba(153, 102, 255, 1)',
                                'rgba(201, 203, 207, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { display: false }
                        },
                        scales: {
                            y: { beginAtZero: true, title: { display: true, text: 'Possession (%)' } }
                        }
                    }
                });
            } catch (e) {}
        }

        async function loadCards(team, matches) {
            if (cardsChart) cardsChart.destroy();
            try {
                let data;
                if (matches) {
                    let teamMatches = matches.filter(m => m.homeTeam === team || m.awayTeam === team);
                    let yellowCards = 0;
                    let redCards = 0;
                    teamMatches.forEach(m => {
                        if (m.homeTeam === team) {
                            yellowCards += m.homeYellowCards;
                            redCards += m.homeRedCards;
                        }
                        if (m.awayTeam === team) {
                            yellowCards += m.awayYellowCards;
                            redCards += m.awayRedCards;
                        }
                    });
                    data = [{ date: new Date().toISOString().slice(0, 10), yellow: yellowCards, red: redCards }];
                } else {
                    const res = await fetch(`/Analysis/GetCards?team=${encodeURIComponent(team)}`);
                    data = await res.json();
                }
                const ctx = document.getElementById('cardsChart').getContext('2d');
                cardsChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.map(d => d.date),
                        datasets: [
                            {
                                label: 'Yellow Cards',
                                data: data.map(d => d.yellow),
                                backgroundColor: 'rgba(255, 205, 86, 0.7)',
                                borderColor: 'rgba(255, 205, 86, 1)',
                                borderWidth: 1
                            },
                            {
                                label: 'Red Cards',
                                data: data.map(d => d.red),
                                backgroundColor: 'rgba(255, 99, 132, 0.7)',
                                borderColor: 'rgba(255, 99, 132, 1)',
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { display: true }
                        },
                        scales: {
                            y: { beginAtZero: true, title: { display: true, text: 'Cards' } },
                            x: { title: { display: true, text: 'Date' } }
                        }
                    }
                });
            } catch (e) {}
        }

        async function loadShots(team, matches) {
            if (shotsChart) shotsChart.destroy();
            try {
                let data;
                if (matches) {
                    let teamMatches = matches.filter(m => m.homeTeam === team || m.awayTeam === team);
                    let totalShots = 0;
                    let shotsOnTarget = 0;
                    teamMatches.forEach(m => {
                        if (m.homeTeam === team) {
                            totalShots += m.homeShots;
                            shotsOnTarget += m.homeShotsOnTarget;
                        }
                        if (m.awayTeam === team) {
                            totalShots += m.awayShots;
                            shotsOnTarget += m.awayShotsOnTarget;
                        }
                    });
                    data = [{ date: new Date().toISOString().slice(0, 10), shots: totalShots, shotsOnTarget: shotsOnTarget }];
                } else {
                    const res = await fetch(`/Analysis/GetShots?team=${encodeURIComponent(team)}`);
                    data = await res.json();
                }
                const ctx = document.getElementById('shotsChart').getContext('2d');
                shotsChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.map(d => d.date),
                        datasets: [
                            {
                                label: 'Total Shots',
                                data: data.map(d => d.shots),
                                backgroundColor: 'rgba(54, 162, 235, 0.7)',
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 1
                            },
                            {
                                label: 'Shots on Target',
                                data: data.map(d => d.shotsOnTarget),
                                backgroundColor: 'rgba(75, 192, 192, 0.7)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { display: true }
                        },
                        scales: {
                            y: { beginAtZero: true, title: { display: true, text: 'Shots' } },
                            x: { title: { display: true, text: 'Date' } }
                        }
                    }
                });
            } catch (e) {}
        }

        async function loadPoints(team, matches) {
            if (pointsChart) pointsChart.destroy();
            try {
                let data;
                if (matches) {
                    let teamMatches = matches.filter(m => m.homeTeam === team || m.awayTeam === team);
                    let points = 0;
                    teamMatches.forEach(m => {
                        if (m.homeTeam === team) points += m.homeGoals;
                        if (m.awayTeam === team) points += m.awayGoals;
                    });
                    data = [{ date: new Date().toISOString().slice(0, 10), points: points }];
                } else {
                    const res = await fetch(`/Analysis/GetPoints?team=${encodeURIComponent(team)}`);
                    data = await res.json();
                }
                const ctx = document.getElementById('pointsChart').getContext('2d');
                pointsChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.map(d => d.date),
                        datasets: [{
                            label: 'Cumulative Points',
                            data: data.map(d => d.points),
                            borderColor: 'rgba(255, 159, 64, 1)',
                            backgroundColor: 'rgba(255, 159, 64, 0.2)',
                            fill: true,
                            tension: 0.3
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { display: true }
                        },
                        scales: {
                            y: { beginAtZero: true, title: { display: true, text: 'Points' } },
                            x: { title: { display: true, text: 'Date' } }
                        }
                    }
                });
            } catch (e) {}
        }

        // On page load
        loadTeamsFromCacheOrApi();
        document.getElementById('teamDropdown').addEventListener('change', function() {
            const team = this.value;
            const matches = window.footballMatchesCache;
            updateAllCharts(team, matches);
        });
    </script>
} 