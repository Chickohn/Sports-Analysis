@{
    ViewData["Title"] = "Advanced Team Analysis";
}

<div class="container-fluid mt-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1>Advanced Team Analysis</h1>
                <div class="d-flex align-items-center gap-3">
                    <div id="teamGoalsLoading" class="me-3" style="display:none;text-align:center;">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div id="teamGoalsLoadingText" style="font-size:0.9em;">Loading teams...</div>
                    </div>
                    <div class="d-flex gap-2">
                        <select id="teamDropdown" class="form-select w-auto"></select>
                        <select id="compareTeamDropdown" class="form-select w-auto">
                            <option value="">Compare with...</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Metrics Overview -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Performance Metrics Overview</h5>
                    <div class="row" id="performanceMetrics">
                        <!-- Metrics will be dynamically inserted here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Form and Momentum Analysis -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Form and Momentum Analysis</h5>
                    <canvas id="formChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Expected Goals (xG) Analysis -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Expected Goals (xG) Analysis</h5>
                    <canvas id="xGChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Home vs Away Performance -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Home vs Away Performance</h5>
                    <canvas id="venuePerformanceChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Attack vs Defense Efficiency -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Attack vs Defense Efficiency</h5>
                    <canvas id="efficiencyChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Recent Match Performance -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Recent Match Performance</h5>
                    <canvas id="recentPerformanceChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Performance Trends -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Performance Trends</h5>
                    <canvas id="trendsChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Team Comparison -->
        <div class="col-12 mb-4" id="comparisonSection" style="display: none;">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Team Comparison</h5>
                    <div class="row">
                        <div class="col-md-6">
                            <canvas id="comparisonChart"></canvas>
                        </div>
                        <div class="col-md-6">
                            <div id="comparisonMetrics">
                                <!-- Comparison metrics will be inserted here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Chart instances
        let formChart, xGChart, venuePerformanceChart, efficiencyChart, recentPerformanceChart, trendsChart, comparisonChart;
        let allTeams = [];
        let loadingTeams = false;
        let loadingComplete = false;

        // Calculate advanced metrics
        function calculateAdvancedMetrics(matches, team) {
            if (!Array.isArray(matches)) {
                console.error("Expected 'matches' to be an array but got:", matches);
                return {
                    formScore: 0,
                    momentum: 0,
                    attackEfficiency: 0,
                    defenseEfficiency: 0,
                    venuePerformance: { home: { goals: 0, conceded: 0, points: 0 }, away: { goals: 0, conceded: 0, points: 0 } },
                    xG: [],
                    actualGoals: []
                };
            }
            const teamMatches = matches.filter(m => m.homeTeam === team || m.awayTeam === team);
            const recentMatches = teamMatches.slice(-10);
            
            // Calculate xG (simplified version based on shots and possession)
            const calculateXG = (shots, shotsOnTarget, possession) => {
                return (shots * 0.1) + (shotsOnTarget * 0.3) + (possession * 0.001);
            };

            // Calculate form score (weighted recent performance)
            const calculateFormScore = (matches) => {
                return matches.reduce((score, match, index) => {
                    const weight = Math.pow(0.8, matches.length - 1 - index);
                    const isHome = match.homeTeam === team;
                    const goals = isHome ? match.homeGoals : match.awayGoals;
                    const conceded = isHome ? match.awayGoals : match.homeGoals;
                    return score + (weight * (goals - conceded));
                }, 0);
            };

            // Calculate momentum (trend in form)
            const calculateMomentum = (matches) => {
                const recentForm = calculateFormScore(matches.slice(-5));
                const previousForm = calculateFormScore(matches.slice(-10, -5));
                return recentForm - previousForm;
            };

            // Calculate attack efficiency
            const calculateAttackEfficiency = (matches) => {
                return matches.reduce((total, match) => {
                    const isHome = match.homeTeam === team;
                    const shots = isHome ? match.homeShots : match.awayShots;
                    const goals = isHome ? match.homeGoals : match.awayGoals;
                    return total + (shots > 0 ? goals / shots : 0);
                }, 0) / matches.length;
            };

            // Calculate defense efficiency
            const calculateDefenseEfficiency = (matches) => {
                return matches.reduce((total, match) => {
                    const isHome = match.homeTeam === team;
                    const shots = isHome ? match.awayShots : match.homeShots;
                    const goals = isHome ? match.awayGoals : match.homeGoals;
                    return total + (shots > 0 ? 1 - (goals / shots) : 1);
                }, 0) / matches.length;
            };

            // Calculate home/away performance
            const calculateVenuePerformance = (matches) => {
                const homeMatches = matches.filter(m => m.homeTeam === team);
                const awayMatches = matches.filter(m => m.awayTeam === team);
                
                return {
                    home: {
                        goals: homeMatches.reduce((sum, m) => sum + m.homeGoals, 0) / homeMatches.length,
                        conceded: homeMatches.reduce((sum, m) => sum + m.awayGoals, 0) / homeMatches.length,
                        points: homeMatches.reduce((sum, m) => sum + (m.homeGoals > m.awayGoals ? 3 : m.homeGoals === m.awayGoals ? 1 : 0), 0) / homeMatches.length
                    },
                    away: {
                        goals: awayMatches.reduce((sum, m) => sum + m.awayGoals, 0) / awayMatches.length,
                        conceded: awayMatches.reduce((sum, m) => sum + m.homeGoals, 0) / awayMatches.length,
                        points: awayMatches.reduce((sum, m) => sum + (m.awayGoals > m.homeGoals ? 3 : m.awayGoals === m.homeGoals ? 1 : 0), 0) / awayMatches.length
                    }
                };
            };

            return {
                formScore: calculateFormScore(recentMatches),
                momentum: calculateMomentum(teamMatches),
                attackEfficiency: calculateAttackEfficiency(recentMatches),
                defenseEfficiency: calculateDefenseEfficiency(recentMatches),
                venuePerformance: calculateVenuePerformance(teamMatches),
                xG: recentMatches.map(match => {
                    const isHome = match.homeTeam === team;
                    return calculateXG(
                        isHome ? match.homeShots : match.awayShots,
                        isHome ? match.homeShotsOnTarget : match.awayShotsOnTarget,
                        isHome ? match.homePossession : match.awayPossession
                    );
                }),
                actualGoals: recentMatches.map(match => {
                    const isHome = match.homeTeam === team;
                    return isHome ? match.homeGoals : match.awayGoals;
                })
            };
        }

        // Update performance metrics
        function updatePerformanceMetrics(metrics) {
            const container = document.getElementById('performanceMetrics');
            container.innerHTML = `
                <div class="col-md-3">
                    <div class="card bg-light">
                        <div class="card-body text-center">
                            <h6 class="card-subtitle mb-2 text-muted">Form Score</h6>
                            <h3 class="card-title">${metrics.formScore.toFixed(2)}</h3>
                            <p class="card-text small">${metrics.formScore > 0 ? 'Positive' : 'Negative'} form</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-light">
                        <div class="card-body text-center">
                            <h6 class="card-subtitle mb-2 text-muted">Momentum</h6>
                            <h3 class="card-title">${metrics.momentum.toFixed(2)}</h3>
                            <p class="card-text small">${metrics.momentum > 0 ? 'Improving' : 'Declining'} trend</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-light">
                        <div class="card-body text-center">
                            <h6 class="card-subtitle mb-2 text-muted">Attack Efficiency</h6>
                            <h3 class="card-title">${(metrics.attackEfficiency * 100).toFixed(1)}%</h3>
                            <p class="card-text small">Goals per shot</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-light">
                        <div class="card-body text-center">
                            <h6 class="card-subtitle mb-2 text-muted">Defense Efficiency</h6>
                            <h3 class="card-title">${(metrics.defenseEfficiency * 100).toFixed(1)}%</h3>
                            <p class="card-text small">Goals prevented per shot</p>
                        </div>
                    </div>
                </div>
            `;
        }

        // Update all charts
        async function updateAllCharts(team, matches) {
            const metrics = calculateAdvancedMetrics(matches, team);
            updatePerformanceMetrics(metrics);

            // Form and Momentum Chart
            if (formChart) formChart.destroy();
            const formCtx = document.getElementById('formChart').getContext('2d');
            formChart = new Chart(formCtx, {
                type: 'line',
                data: {
                    labels: ['5 games ago', '4 games ago', '3 games ago', '2 games ago', 'Last game'],
                    datasets: [{
                        label: 'Form Score',
                        data: metrics.formScore,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Recent Form Trend'
                        }
                    }
                }
            });

            // xG Chart
            if (xGChart) xGChart.destroy();
            const xGCtx = document.getElementById('xGChart').getContext('2d');
            xGChart = new Chart(xGCtx, {
                type: 'bar',
                data: {
                    labels: ['Last 10 Matches'],
                    datasets: [{
                        label: 'Expected Goals (xG)',
                        data: [metrics.xG.reduce((a, b) => a + b, 0) / metrics.xG.length],
                        backgroundColor: 'rgba(54, 162, 235, 0.5)'
                    }, {
                        label: 'Actual Goals',
                        data: [metrics.actualGoals.reduce((a, b) => a + b, 0) / metrics.actualGoals.length],
                        backgroundColor: 'rgba(255, 99, 132, 0.5)'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Expected vs Actual Goals'
                        }
                    }
                }
            });

            // Venue Performance Chart
            if (venuePerformanceChart) venuePerformanceChart.destroy();
            const venueCtx = document.getElementById('venuePerformanceChart').getContext('2d');
            venuePerformanceChart = new Chart(venueCtx, {
                type: 'bar',
                data: {
                    labels: ['Goals Scored', 'Goals Conceded', 'Points per Game'],
                    datasets: [{
                        label: 'Home',
                        data: [
                            metrics.venuePerformance.home.goals,
                            metrics.venuePerformance.home.conceded,
                            metrics.venuePerformance.home.points
                        ],
                        backgroundColor: 'rgba(75, 192, 192, 0.5)'
                    }, {
                        label: 'Away',
                        data: [
                            metrics.venuePerformance.away.goals,
                            metrics.venuePerformance.away.conceded,
                            metrics.venuePerformance.away.points
                        ],
                        backgroundColor: 'rgba(153, 102, 255, 0.5)'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Home vs Away Performance'
                        }
                    }
                }
            });

            // Efficiency Chart
            if (efficiencyChart) efficiencyChart.destroy();
            const efficiencyCtx = document.getElementById('efficiencyChart').getContext('2d');
            efficiencyChart = new Chart(efficiencyCtx, {
                type: 'radar',
                data: {
                    labels: ['Attack Efficiency', 'Defense Efficiency', 'Form Score', 'Momentum'],
                    datasets: [{
                        label: 'Team Performance',
                        data: [
                            metrics.attackEfficiency * 100,
                            metrics.defenseEfficiency * 100,
                            metrics.formScore,
                            metrics.momentum
                        ],
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        pointBackgroundColor: 'rgba(75, 192, 192, 1)'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Performance Metrics'
                        }
                    },
                    scales: {
                        r: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // Update comparison if a team is selected
            const compareTeam = document.getElementById('compareTeamDropdown').value;
            if (compareTeam) {
                updateComparison(team, compareTeam, matches);
            }
        }

        // Update team comparison
        function updateComparison(team1, team2, matches) {
            const metrics1 = calculateAdvancedMetrics(matches, team1);
            const metrics2 = calculateAdvancedMetrics(matches, team2);

            // Show comparison section
            document.getElementById('comparisonSection').style.display = 'block';

            // Update comparison chart
            if (comparisonChart) comparisonChart.destroy();
            const comparisonCtx = document.getElementById('comparisonChart').getContext('2d');
            comparisonChart = new Chart(comparisonCtx, {
                type: 'radar',
                data: {
                    labels: ['Attack Efficiency', 'Defense Efficiency', 'Form Score', 'Momentum'],
                    datasets: [{
                        label: team1,
                        data: [
                            metrics1.attackEfficiency * 100,
                            metrics1.defenseEfficiency * 100,
                            metrics1.formScore,
                            metrics1.momentum
                        ],
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        pointBackgroundColor: 'rgba(75, 192, 192, 1)'
                    }, {
                        label: team2,
                        data: [
                            metrics2.attackEfficiency * 100,
                            metrics2.defenseEfficiency * 100,
                            metrics2.formScore,
                            metrics2.momentum
                        ],
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        pointBackgroundColor: 'rgba(255, 99, 132, 1)'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Team Comparison'
                        }
                    },
                    scales: {
                        r: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // Update comparison metrics
            const container = document.getElementById('comparisonMetrics');
            container.innerHTML = `
                <div class="row">
                    <div class="col-6">
                        <h6>${team1}</h6>
                        <ul class="list-unstyled">
                            <li>Form Score: ${metrics1.formScore.toFixed(2)}</li>
                            <li>Momentum: ${metrics1.momentum.toFixed(2)}</li>
                            <li>Attack Efficiency: ${(metrics1.attackEfficiency * 100).toFixed(1)}%</li>
                            <li>Defense Efficiency: ${(metrics1.defenseEfficiency * 100).toFixed(1)}%</li>
                        </ul>
                    </div>
                    <div class="col-6">
                        <h6>${team2}</h6>
                        <ul class="list-unstyled">
                            <li>Form Score: ${metrics2.formScore.toFixed(2)}</li>
                            <li>Momentum: ${metrics2.momentum.toFixed(2)}</li>
                            <li>Attack Efficiency: ${(metrics2.attackEfficiency * 100).toFixed(1)}%</li>
                            <li>Defense Efficiency: ${(metrics2.defenseEfficiency * 100).toFixed(1)}%</li>
                        </ul>
                    </div>
                </div>
            `;
        }

        // Load teams and initialize
        async function loadTeamsFromCacheOrApi() {
            if (loadingTeams || loadingComplete) return;
            loadingTeams = true;
            document.getElementById('teamGoalsLoading').style.display = '';
            document.getElementById('teamGoalsLoadingText').textContent = 'Loading teams...';
            
            const dropdown = document.getElementById('teamDropdown');
            const compareDropdown = document.getElementById('compareTeamDropdown');
            dropdown.disabled = true;
            compareDropdown.disabled = true;
            
            try {
                const response = await fetch('/Analysis/GetTeams');
                allTeams = await response.json();
                const options = '<option value="">Select a team</option>' +
                    allTeams.map(team => `<option value="${team}">${team}</option>`).join('');
                dropdown.innerHTML = options;
                compareDropdown.innerHTML = '<option value="">Compare with...</option>' + options;
                
                if (dropdown.value) {
                    const matches = window.footballMatchesCache;
                    await updateAllCharts(dropdown.value, matches);
                }
            } catch (error) {
                console.error('Error loading teams:', error);
            }
            
            loadingTeams = false;
            loadingComplete = true;
            document.getElementById('teamGoalsLoading').style.display = 'none';
            dropdown.disabled = false;
            compareDropdown.disabled = false;
        }

        // Event listeners
        document.getElementById('teamDropdown').addEventListener('change', async function() {
            const team = this.value;
            if (!team) return;
            try {
                // Fetch matches for the selected team
                const response = await fetch('/Analysis/GetTeamMatches?team=' + encodeURIComponent(team));
                const matches = await response.json();
                window.footballMatchesCache = matches; // cache for comparison use
                await updateAllCharts(team, matches);
            } catch (err) {
                console.error('Failed to fetch team matches:', err);
                updateAllCharts(team, []); // fallback to empty
            }
        });

        document.getElementById('compareTeamDropdown').addEventListener('change', async function() {
            const team1 = document.getElementById('teamDropdown').value;
            const team2 = this.value;
            if (team1 && team2) {
                try {
                    // Fetch matches for both teams
                    const [resp1, resp2] = await Promise.all([
                        fetch('/Analysis/GetTeamMatches?team=' + encodeURIComponent(team1)),
                        fetch('/Analysis/GetTeamMatches?team=' + encodeURIComponent(team2))
                    ]);
                    const [matches1, matches2] = await Promise.all([resp1.json(), resp2.json()]);
                    // Merge both sets of matches for comparison
                    const allMatches = [...matches1, ...matches2];
                    updateComparison(team1, team2, allMatches);
                } catch (err) {
                    console.error('Failed to fetch comparison team matches:', err);
                    updateComparison(team1, team2, []);
                }
            } else {
                document.getElementById('comparisonSection').style.display = 'none';
            }
        });

        // Initialize on page load
        loadTeamsFromCacheOrApi();
    </script>
} 